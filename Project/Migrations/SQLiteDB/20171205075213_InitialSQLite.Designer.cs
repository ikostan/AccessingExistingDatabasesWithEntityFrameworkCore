// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Project.SQLite;
using System;

namespace Project.Migrations.SQLiteDB
{
    [DbContext(typeof(SQLiteDBContext))]
    [Migration("20171205075213_InitialSQLite")]
    partial class InitialSQLite
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Project.SQLite.CustomerSQLite", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerID");

                    b.Property<string>("StrFldAddress")
                        .HasColumnName("str_fld_Address")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StrFldCity")
                        .HasColumnName("str_fld_City")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StrFldEmail")
                        .HasColumnName("str_fld_Email")
                        .HasColumnType("varchar(300)")
                        .HasAnnotation("BackingField", "_email");

                    b.Property<string>("StrFldFirstName")
                        .HasColumnName("str_fld_FirstName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StrFldLastName")
                        .HasColumnName("str_fld_LastName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StrFldPhone")
                        .HasColumnName("str_fld_Phone")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StrFldState")
                        .HasColumnName("str_fld_State")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StrFldZipcode")
                        .HasColumnName("str_fld_Zipcode")
                        .HasColumnType("varchar(50)");

                    b.HasKey("CustomerId");

                    b.HasIndex("StrFldLastName");

                    b.ToTable("CustomerSQLite");
                });

            modelBuilder.Entity("Project.SQLite.OrderItemSQLite", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderItemID");

                    b.Property<int>("OrderId")
                        .HasColumnName("OrderID");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnName("ProductID")
                        .HasMaxLength(10);

                    b.Property<int?>("Quantity");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItemSQLite");
                });

            modelBuilder.Entity("Project.SQLite.OrderSQLite", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SalespersonId")
                        .HasColumnName("SalespersonID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('none')");

                    b.Property<decimal?>("TotalDue")
                        .HasColumnType("money");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDate")
                        .HasName("IX_Order");

                    b.HasIndex("SalespersonId");

                    b.ToTable("OrderSQLite");
                });

            modelBuilder.Entity("Project.SQLite.ProductSQLite", b =>
                {
                    b.Property<string>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductID")
                        .HasMaxLength(10);

                    b.Property<bool>("Perishable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ProductName")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Size");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Variety")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ProductId");

                    b.ToTable("ProductSQLite");

                    b.HasDiscriminator<bool>("Perishable").HasValue(false);
                });

            modelBuilder.Entity("Project.SQLite.SalesGroupSQLite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("State", "Type")
                        .IsUnique()
                        .HasName("IX_StateType");

                    b.ToTable("SalesGroupSQLite");
                });

            modelBuilder.Entity("Project.SQLite.SalespersonSQLite", b =>
                {
                    b.Property<int>("SalespersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalespersonID");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SalesGroupSQLiteState");

                    b.Property<int?>("SalesGroupSQLiteType");

                    b.Property<string>("SalesGroupState")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("CA")
                        .HasMaxLength(2);

                    b.Property<int>("SalesGroupType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<string>("State")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Zipcode")
                        .HasColumnType("varchar(50)");

                    b.HasKey("SalespersonId");

                    b.HasIndex("SalesGroupSQLiteState", "SalesGroupSQLiteType");

                    b.ToTable("SalespersonSQLite");
                });

            modelBuilder.Entity("Project.SQLite.PerishableProductSQLite", b =>
                {
                    b.HasBaseType("Project.SQLite.ProductSQLite");

                    b.Property<int?>("ExpirationDays");

                    b.Property<bool?>("Refrigerated");

                    b.ToTable("PerishableProductSQLite");

                    b.HasDiscriminator().HasValue(true);
                });

            modelBuilder.Entity("Project.SQLite.OrderItemSQLite", b =>
                {
                    b.HasOne("Project.SQLite.OrderSQLite", "OrderSQLite")
                        .WithMany("OrderItemSQLite")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderItem_Order")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Project.SQLite.ProductSQLite", "ProductSQLite")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderItem_Product1")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Project.SQLite.OrderSQLite", b =>
                {
                    b.HasOne("Project.SQLite.CustomerSQLite", "CustomerSQLite")
                        .WithMany("OrderSQLite")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Order_Customer")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Project.SQLite.SalespersonSQLite", "SalespersonSQLite")
                        .WithMany("OrderSQLite")
                        .HasForeignKey("SalespersonId")
                        .HasConstraintName("FK_Order_Salesperson")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Project.SQLite.SalespersonSQLite", b =>
                {
                    b.HasOne("Project.SQLite.SalesGroupSQLite", "SalesGroupSQLite")
                        .WithMany("SalesPeopleSQLite")
                        .HasForeignKey("SalesGroupSQLiteState", "SalesGroupSQLiteType")
                        .HasPrincipalKey("State", "Type");
                });
#pragma warning restore 612, 618
        }
    }
}
